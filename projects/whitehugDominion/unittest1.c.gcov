        -:    0:Source:unittest1.c
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
function main called 1 returned 100% blocks executed 88%
        1:    9:int main() {
        -:   10:	struct gameState G;
        1:   11:	int seed=1000;
        1:   12:	int numPlayers=2;
        1:   13:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        1:   14:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   15:	printf("Testing playCard():\n");
call    0 returned 100%
        1:   16:	G.phase=1;
        1:   17:	int value=playCard(1,1,1,1,&G);
call    0 returned 100%
        1:   18:	printf("Testing phase: expected: -1, actual: %d\n", value);
call    0 returned 100%
        1:   19:	G.phase=0;
        1:   20:	G.numActions=0;
        1:   21:	value=playCard(1,1,1,1,&G);
call    0 returned 100%
        1:   22:	printf("Testing action number: expected: -1, actual: %d\n", value);
call    0 returned 100%
        1:   23:	G.numActions=3;
        1:   24:	G.hand[0][0]=steward;
        1:   25:	value=playCard(0,1,2,3,&G);
call    0 returned 100%
        1:   26:	printf("Testing end action number: expected: 2, actual: %d\n", G.numActions);
call    0 returned 100%
        1:   27:	assert(G.numActions==2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   28:	printf("Testing for end of function: expected: 0, actual: %d\n", value);
call    0 returned 100%
        1:   29:	assert(value==0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   30:	printf("TESTING SUCCEEDED\n");
call    0 returned 100%
        -:   31:}
